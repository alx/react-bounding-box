name: Code Quality

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run Prettier check
        run: npm run format:check

      - name: Run ESLint with annotations
        run: npm run lint

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME\|XXX\|HACK" src/; then
            echo "Found TODO/FIXME comments in code"
            exit 1
          fi

      - name: Check bundle size
        run: |
          npm run build:analyze || echo "Bundle analysis skipped - continuing..."
          # You can add bundle size checks here

      - name: Run TypeScript strict check
        run: npm run type-check || echo "TypeScript check failed - continuing..."

      - name: Check for console statements
        run: |
          # Use ESLint to check for console statements in production code
          # This will respect ESLint rules and exceptions properly

          # Run ESLint and capture results
          if npx eslint src --format json > eslint-results.json 2>/dev/null; then
            echo "ESLint completed successfully"
          else
            echo "ESLint completed with warnings/errors"
          fi

          # Check for console statements (excluding logger.ts)
          if cat eslint-results.json | node -e "
            const results = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            let hasConsoleViolations = false;
            
            for (const result of results) {
              // Skip logger.ts file
              if (result.filePath.includes('logger.ts')) continue;
              
              const consoleMessages = result.messages.filter(msg => msg.ruleId === 'no-console');
              
              if (consoleMessages.length > 0) {
                hasConsoleViolations = true;
                console.log('Found console statements in: ' + result.filePath);
                consoleMessages.forEach(msg => {
                  console.log('  Line ' + msg.line + ': ' + msg.message);
                });
              }
            }
            
            if (hasConsoleViolations) {
              console.log('\\nAll console statements should use the logger utility from src/utils/logger.ts');
              process.exit(1);
            } else {
              console.log('No console statements found in production code (excluding logger utility)');
            }
          "; then
            echo "Console check passed"
          else
            echo "Console check failed"
            exit 1
          fi

      - name: Validate package.json
        run: |
          npm run build
          npm pack --dry-run

      - name: Check for vulnerable dependencies
        run: |
          npm audit --audit-level moderate || echo "Audit completed with warnings"
          npm run security:check || echo "Security check completed with warnings"
