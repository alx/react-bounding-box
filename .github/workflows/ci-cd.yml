name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Job 1: Install dependencies and cache
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

  # Job 2: Lint and type check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check || echo "TypeScript check failed - continuing..."

  # Job 3: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run tests
        run: npm test

      - name: Run tests with coverage
        run: npm run test:coverage || npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 4: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run security audit
        run: npm run security:audit || echo "Security audit completed with warnings"

      - name: Run audit CI
        run: npm run security:check || echo "Security check completed with warnings"

  # Job 5: Build
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [install, lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Build package
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

      - name: Verify package contents
        run: npm pack --dry-run

  # Job 6: Publish to npm (only on tags)
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Verify package version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - Check the [CHANGELOG.md](CHANGELOG.md) for details
          draft: false
          prerelease: false

  # Job 7: Deploy Storybook (optional)
  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Build Storybook
        run: npm run build-storybook

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
