name: Main CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v2

jobs:
  # Job 1: Install dependencies and cache
  install:
    name: üì¶ Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

  # Job 2: Code Quality Checks
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run Prettier check
        run: |
          if npm run format:check; then
            echo "‚úÖ Prettier check passed"
          else
            echo "‚ùå Prettier check failed"
            echo "Run 'npm run format' to fix formatting issues"
            exit 1
          fi

      - name: Run ESLint
        run: |
          if npm run lint; then
            echo "‚úÖ ESLint check passed"
          else
            echo "‚ùå ESLint check failed"
            echo "Run 'npm run lintfix' to fix auto-fixable issues"
            exit 1
          fi

      - name: Run TypeScript check
        run: |
          if npm run type-check; then
            echo "‚úÖ TypeScript check passed"
          else
            echo "‚ö†Ô∏è TypeScript check failed - continuing..."
          fi

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME\|XXX\|HACK" src/; then
            echo "::warning::Found TODO/FIXME comments in code"
            echo "Consider addressing these before merging to main"
            exit 1
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

      - name: Check for console statements
        run: |
          # Run ESLint and capture results
          if npx eslint src --format json > eslint-results.json 2>/dev/null; then
            echo "ESLint completed successfully"
          else
            echo "ESLint completed with warnings/errors"
          fi

          # Check for console statements (excluding logger.js and test files)
          if node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('eslint-results.json', 'utf8'));
            let hasConsoleViolations = false;
            
            for (const result of results) {
              // Skip logger.js file and test files
              if (result.filePath.includes('logger.js') || 
                  result.filePath.includes('.test.') || 
                  result.filePath.includes('.spec.')) {
                continue;
              }
              
              const consoleMessages = result.messages.filter(msg => msg.ruleId === 'no-console');
              
              if (consoleMessages.length > 0) {
                hasConsoleViolations = true;
                console.log('‚ùå Found console statements in: ' + result.filePath);
                consoleMessages.forEach(msg => {
                  console.log('  Line ' + msg.line + ': ' + msg.message);
                });
              }
            }
            
            if (hasConsoleViolations) {
              console.log('\nüí° All console statements should use the logger utility from src/utils/logger.js');
              process.exit(1);
            } else {
              console.log('‚úÖ No console statements found in production code (excluding logger utility)');
            }
          "; then
            echo "Console check passed"
          else
            echo "‚ùå Console check failed"
            exit 1
          fi

  # Job 3: Multi-Node Testing
  test:
    name: üß™ Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: install
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run tests
        run: npm test

      - name: Run tests with coverage (Node 18 only)
        if: matrix.node-version == '18.x'
        run: npm run test:coverage || npm test

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 4: Security Audit
  security:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Run security audit
        run: npm run security:audit || echo "Security audit completed with warnings"

      - name: Check for vulnerable dependencies
        run: npm audit --audit-level moderate || echo "Audit completed with warnings"

  # Job 5: Build and Package
  build:
    name: üèóÔ∏è Build Package
    runs-on: ubuntu-latest
    needs: [install, code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-

      - name: Build package
        run: npm run build

      - name: Analyze bundle size
        run: |
          npm run build:analyze || echo "Bundle analysis skipped - continuing..."
          # Check if dist directory exists and has files
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "‚úÖ Build output exists"
            ls -la dist/
          else
            echo "‚ùå Build output missing"
            exit 1
          fi

      - name: Verify package exports
        run: node scripts/verify-exports.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

      - name: Verify package contents
        run: npm pack --dry-run

  # Job 6: Final Validation
  validate:
    name: ‚úÖ Final Validation
    runs-on: ubuntu-latest
    needs: [build, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.security.result }}" = "success" ]; then
            echo "üéâ All checks passed! Ready for deployment."
          else
            echo "‚ùå Some checks failed. Please review the logs."
            exit 1
          fi