name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (patch, minor, major, or specific version like 1.2.3)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - specific
      specific_version:
        description: 'Specific version (only if version is "specific")'
        required: false
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run full validation
        run: |
          npm run lint
          npm run type-check
          npm test
          npm run build
          npm run security:audit

      - name: Configure git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Version and tag
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" = "specific" ]; then
            NEW_VERSION="${{ github.event.inputs.specific_version }}"
            npm version $NEW_VERSION --no-git-tag-version
          else
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          echo "## v${{ steps.version.outputs.new_version }} - $(date +%Y-%m-%d)" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "### Changes" >> CHANGELOG.tmp
          echo "- Version bump to ${{ steps.version.outputs.new_version }}" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> CHANGELOG.tmp
          fi
          mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.tag_name }}

      - name: Push changes
        run: |
          git push origin HEAD:${{ github.ref_name }}
          git push origin ${{ steps.version.outputs.tag_name }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.version.outputs.new_version }}
            
            Check the [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            ```bash
            npm install react-bounding-box@${{ steps.version.outputs.new_version }}
            ```
            
            ## Breaking Changes
            - None in this release
            
            ## New Features
            - Check changelog for details
            
            ## Bug Fixes
            - Check changelog for details
          draft: false
          prerelease: false